import { Request, Response } from 'express';
import { container, singleton } from 'tsyringe';
import { ClassTransformer } from 'class-transformer';
import { CreateVulnerabilityService } from '../services/CreateVulnerabilityService';
import { IndexVulnerabilityService } from '../services/IndexVulnerabilityService';

class VulnerabilityController {
  private static instance: VulnerabilityController;

  private constructor() {
    // Construtor privado para evitar inicialização externa
  }

  public static getInstance(): VulnerabilityController {
    if (!VulnerabilityController.instance) {
      VulnerabilityController.instance = new VulnerabilityController();
    }

    return VulnerabilityController.instance;
  }

  public async create(request: Request, response: Response): Promise<Response> {

    const createVulnerabilityService = container.resolve(CreateVulnerabilityService);

    const vulnerability = await createVulnerabilityService.execute(request.body);

    return response.json(vulnerability);
  }

  public async index(request: Request, response: Response): Promise<Response> {
    const indexVulnerabilityService = container.resolve(IndexVulnerabilityService);

    const vulnerabilities = await indexVulnerabilityService.execute();

    return response.json(vulnerabilities);
  }

}

export default VulnerabilityController;